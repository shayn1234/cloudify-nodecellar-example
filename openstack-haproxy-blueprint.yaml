tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind
  an haproxy instance on an openstack cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0m14/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.5/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/nodecellar.yaml
  - types/openstack-types.yaml
  - types/haproxy/haproxy.yaml


plugins:
  security_policy_workflow_plugin:
    executor: central_deployment_agent

workflows:
  secure_relationships_workflow: security_policy_workflow_plugin.secure_relationships
    parameters:
      policy:
        description: policy file
        type: string

relationships:
  security_host_connected_to_target:
     derived_from: cloudify.relationships.connected_to
     target_interfaces:
       cloudify.interfaces.relationship_lifecycle:
         # need to create a new function in openstack_plugin to update security group
         start: 
           implementation: security_topology_plugin.tasks.update_target_host_ip
     source_interfaces:
       cloudify.interfaces.relationship_lifecycle:
        # need to create a new function in openstack_plugin to update security group
         start: 
           implementation: security_topology_plugin.tasks.update_target_host_ip
     properties:
       direction: ##yoram: Do we really need this one?
         default: source_to_target
       ports:
         default: none

##yoram: I think this should not be here:
  security_host_connected_to_target_tag_version:
     derived_from: cloudify.relationships.connected_to
     target_interfaces:
       cloudify.interfaces.relationship_lifecycle:
         # need to create a new function in openstack_plugin to update security group
         start: 
           implementation: security_topology_plugin.tasks.update_host_ip #both source and target




#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> <deployment_id> -i inputs.json
#####################################################################################

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  flavor:
    description: >
      Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      #### Security topology (update source host ip to target securuty group)
      - type: security_host_connected_to_target
        target: mongod
        properties:
           ports: 
             - { get_property: [ mongod, port ] }

      ##### tag version
      - type: security_host_connected_to_target_tag_version
        target:mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy

        ### Security topology (update target host ip in source security group)
      - type: security_host_connected_to_target
        target: haproxy
        properties:
           direction: target to source

        ##### tag version
      - type: security_host_connected_to_target_tag_version
        target: mongod

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  ########################################
  # Note: only ubuntu haproxy installation
  # is supported.
  ########################################

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
  nodejs_host:
    type: nodecellar.nodes.MonitoredServer

    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################
    instances:
      deploy: 2

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching an ip to the haproxy frontend host
      ###########################################################

      - type: cloudify.openstack.server_connected_to_floating_ip
        target: nodecellar_ip

  ###########################################################
  # An ip to be attached to the haproxy frontend host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################

  nodecellar_ip:
    type: cloudify.openstack.nodes.FloatingIP

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments outputs <deployment_id>
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_ip, floating_ip_address ] }
      port: { get_property: [haproxy, frontend_port] }
